
 int kthToLast(int k) {
		Node t= head;
		int counter=0;
		
		while(t != null) {
			t=t.next;
			counter++;
		}
		
		if(counter<k) {
			return;
		}
		
		t=head;
		
		for(int i=1; i<counter-k; i++) {
			t=t.next;
		}
		
		return temp.data;
	}




I - Implement an algorithm to find the kth to last element of a singly linked list.

D - Returns the value at the given k position.

E & A (Duke's 7 Steps):

(1) Linked List  4-7-5-3-2-8  
     k= 5
    returns 2



(2)Iterate through linked list, creating a counter to keep track of the nodes it has traveresed and keeping track on 
   If the counter is less than the k we were given signifies that node doesn't exist. If that's not the case then we will 
   subtract the k from the length of the list and traverse until you get to reach the number.



(3) There aren't patterns, there is only a for loop and  while . 


(4)    1-5-2-8-5-4-9-3
        k= 4
	counter = 8
	returns 8


(5)Code is implemented above. 


(6)     1-2-3-4 
	 k = 4 
	
	 7-3 
	 k = 1
	 
	 1-5-2-8-5-4-9-3
	 k = 4
	 

(7) The value is being returned is one less away from the actual k value. 


L - The cases work when the counter is added by 1.

