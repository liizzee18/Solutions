


public class queueStack {
	public newQueue(){
		Stack<Integer> s1 = new Stack<Integer>();
		Stack<Integer> s2 = new Stack<Integer>();
	}
	
	public int size() {
		return s1.size()+s2.size();
	}
	
	public void add(Integer i) {
		s2.push();
	}
	
	public void remove() {
		s1.pop();
	}
	
	public Integer peek() {
		s1.peek();
	}
}





I- Implement a MyQueue class which implements a queue using two stacks.

D- Goal is to perform all operations from a queue with two stacks.

E&A (Duke's 7 Steps)

(1)  N/A
  
(2)Queue will implement two stacks in order to implement the functions of a queue. 
   Size is determined by the addition of both queues. 

(3)It's necessary to use stacks as stated  in the problem. 

(4) N/A

(5)Implemented in the code above.

(6)N/A

(7)Since there are two stacks its a bit tricky to determine what each stack should contain and keep track of the stack.  

L - All cases worked when tested. 




