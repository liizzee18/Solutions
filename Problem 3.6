

	public static String catDog(Queue<String>s) {
		Queue<String>temp= new Queue<String>();
		while(s.isEmpty()) {
			if(s.peek()==Cat) {
				return s.dequeue();
			}else {
				temp.enqueue(s.dequeue());
			}
		}
	}



I - Create the data structures to maintain this system and implement operations such as enqueue, 
    dequeueAny, dequeueDog, and dequeueCat. 

D - Return the first cat or dog that is encountered depending on what the user desires. 

(1)
If the user were to pick a cat out of 6 cats and the first encounter is cat5 the return will be that cat. 
 
(2)

Removing the values (dequeue)until the dog or the cat is found. After the queue is placed in its original state. 

(3)

The use of a temp queue works to put in the values that aren't needed and then accessed later when needed to put back into its' original state. 


(5)

Code implemented in above

(6)

[d5,c6,c3,d7,d1,c9] user input : cat
[d5,d6,d3,d7,d1,d9] user input : cat
[c5,c6,c3,c7,c1,c9] user input : dog

(7) Looking at the different classes of the queue. 

L - works for all cases 


